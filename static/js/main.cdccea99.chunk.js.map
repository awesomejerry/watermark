{"version":3,"sources":["Watermark.js","App.js","serviceWorker.js","index.js"],"names":["Watermark","canvasRef","useRef","rawRef","previewRef","uploadRef","useState","raw","setRaw","preview","setPreview","className","Button","variant","color","onClick","current","click","id","ref","type","onChange","e","preventDefault","reader","FileReader","file","target","files","onloadend","result","readAsDataURL","imageUpload","src","alt","onLoad","canvas","img","ctx","getContext","hRatio","width","vRatio","height","ratio","Math","max","centerShift_x","centerShift_y","clearRect","drawImage","lineWidth","strokeStyle","beginPath","moveTo","lineTo","size","stroke","closePath","font","fillStyle","fillText","hPadding","vPadding","toDataURL","previewLoad","href","download","App","AppBar","position","Toolbar","Typography","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdccea99.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './Watermark.css';\nimport Button from '@material-ui/core/Button';\n\nconst size = 1080;\n\nconst imageUpload = (e, { setRaw }) => {\n  e.preventDefault();\n\n  let reader = new FileReader();\n  let file = e.target.files[0];\n\n  reader.onloadend = () => {\n    setRaw(reader.result);\n  };\n\n  reader.readAsDataURL(file);\n};\n\nconst previewLoad = ({ canvasRef, rawRef, setPreview }) => {\n  const canvas = canvasRef.current;\n  const img = rawRef.current;\n  const ctx = canvas.getContext('2d');\n  const hRatio = canvas.width / img.width;\n  const vRatio = canvas.height / img.height;\n  const ratio = Math.max(hRatio, vRatio);\n  const centerShift_x = (canvas.width - img.width * ratio) / 2;\n  const centerShift_y = (canvas.height - img.height * ratio) / 2;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(\n    img,\n    0,\n    0,\n    img.width,\n    img.height,\n    centerShift_x,\n    centerShift_y,\n    img.width * ratio,\n    img.height * ratio\n  );\n  ctx.lineWidth = 8;\n  ctx.strokeStyle = '#fafafa';\n\n  const hPadding = 80;\n  const vPadding = 30;\n\n  ctx.beginPath();\n  ctx.moveTo(hPadding, vPadding);\n  ctx.lineTo(size - hPadding, vPadding);\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.beginPath();\n  ctx.moveTo(size - vPadding, hPadding);\n  ctx.lineTo(size - vPadding, size - hPadding);\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.beginPath();\n  ctx.moveTo(size - hPadding, size - vPadding);\n  ctx.lineTo(hPadding, size - vPadding);\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.beginPath();\n  ctx.moveTo(vPadding, size - hPadding);\n  ctx.lineTo(vPadding, hPadding);\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.font = \"normal 800 50px 'Open Sans, sans-serif'\";\n  ctx.fillStyle = '#fafafa';\n  ctx.fillText('NODE', hPadding + 20, vPadding + 60);\n  ctx.fillText('GATHERING', hPadding + 20, vPadding + 100);\n\n  const dataURL = canvas.toDataURL();\n  setPreview(dataURL);\n};\n\nconst Watermark = () => {\n  const canvasRef = useRef(null);\n  const rawRef = useRef(null);\n  const previewRef = useRef(null);\n  const uploadRef = useRef(null);\n  const [raw, setRaw] = useState(null);\n  const [preview, setPreview] = useState(null);\n\n  return (\n    <div className=\"Watermark\">\n      <div className=\"button-margin\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => uploadRef.current.click()}\n        >\n          Choose Photo\n        </Button>\n      </div>\n      <input\n        id=\"upload\"\n        ref={uploadRef}\n        type=\"file\"\n        onChange={e => imageUpload(e, { setRaw })}\n      />\n      <img\n        src={raw}\n        ref={rawRef}\n        alt=\"raw\"\n        onLoad={() => previewLoad({ canvasRef, rawRef, setPreview })}\n      />\n      <canvas ref={canvasRef} width={size} height={size} />\n      {preview && <img src={preview} ref={previewRef} alt=\"download\" />}\n      {preview && (\n        <div className=\"button-margin\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            href={preview}\n            download={'cover.jpg'}\n          >\n            Download\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Watermark;\n","import React from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Watermark from './Watermark';\n\nfunction App() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">Node Gathering Cover</Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\">\n        <Watermark />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}